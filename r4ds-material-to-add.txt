library(tidyverse)


 Let me pull out some stuff to include here:
   
   Chapter 3:
   
   Use comments to explain the why of your code, not the how or the what. The what and how of your code are always possible to figure out, even if it might be tedious, by carefully reading it. If you describe every step in the comments, and then change the code, you will have to remember to update the comments as well or it will be confusing when you return to your code in the future.
 
 Figuring out why something was done is much more difficult, if not impossible. For example, geom_smooth() has an argument called span, which controls the smoothness of the curve, with larger values yielding a smoother curve. Suppose you decide to change the value of span from its default of 0.75 to 0.9: it’s easy for a future reader to understand what is happening, but unless you note your thinking in a comment, no one will understand why you changed the default.
 
 For data analysis code, use comments to explain your overall plan of attack and record important insights as you encounter them. There’s no way to re-capture this knowledge from the code itself.
 
 snake_case; functions(),
 
 Chapter 5
 
 
 
 Remember that variable names (those created by <- and those created by mutate()) should use only lowercase letters, numbers, and _. Use _ to separate words within a name.
 
 As a general rule of thumb, it’s better to prefer long, descriptive names that are easy to understand rather than concise names that are fast to type.
 
 Put spaces on either side of mathematical operators apart from ^ (i.e. +, -, ==, <, …), and around the assignment operator (<-).
 
 Don’t put spaces inside or outside parentheses for regular function calls. Always put a space after a comma, just like in standard English.
 
 |> should always have a space before it and should typically be the last thing on a line.
 
 If the function you’re piping into has named arguments (like mutate() or summarize()), put each argument on a new line. If the function doesn’t have named arguments (like select() or filter()), keep everything on one line unless it doesn’t fit, in which case you should put each argument on its own line.
 
 Finally, be wary of writing very long pipes, say longer than 10-15 lines. Try to break them up into smaller sub-tasks, giving each task an informative name. The names will help cue the reader into what’s happening and makes it easier to check that intermediate results are as expected.
 
 As your scripts get longer, you can use sectioning comments to break up your file into manageable pieces
 
 Chapter 7
 
 We recommend you always start your script with the packages you need. That way, if you share your code with others, they can easily see which packages they need to install. Note, however, that you should never include install.packages() in a script you share. It’s inconsiderate to hand off a script that will something on their computer if they’re not being careful!
   
   RStudio diagnostics, Saving and naming (nice example)
 
 RStudio automatically saves the contents of the script editor when you quit, and automatically reloads it when you re-open. Nevertheless, it’s a good idea to avoid Untitled1, Untitled2, Untitled3, and so on and instead save your scripts and to give them informative names.
 
 
 There is a great pair of keyboard shortcuts that will work together to make sure you’ve captured the important parts of your code in the editor:
   
   Press Cmd/Ctrl + Shift + 0 to restart R.
 Press Cmd/Ctrl + Shift + S to re-run the current script.
 We collectively use this pattern hundreds of times a week.
 
 Alternatively, if you don’t use keyboard shortcuts, you can go to Session > Restart R and then highlight and re-run your current script.
 
 If you rigorously save figures to files with R code and never with the mouse or the clipboard, you will be able to reproduce old work with ease!
   
   Relative and absolute paths (maybe use this in Terminal).
 
 In summary, scripts and projects give you a solid workflow that will serve you well in the future:
   
   Create one RStudio project for each data analysis project.
 
 Save your scripts (with informative names) in the project, edit them, run them in bits or as a whole. Restart R frequently to make sure you’ve captured everything in your scripts.
 
 Only ever use relative paths, not absolute paths.
 
 Then everything you need is in one place and cleanly separated from all the other projects that you are working on.

 Chapter 8


